---
permalink: '../../../../sw.js'
---

const CACHE_NAME = "dgwltd-{% timestamp %}";
const MAX_CACHE_SIZE = 50; // Maximum cache size in entries
const THEME_PATH = 'wp-content/themes/dgwltd/';

// This is the service worker with the Cache-first network
const precacheFiles = [
  `${THEME_PATH}/dist/offline.html`,
  `${THEME_PATH}/dist/css/main.css`,
  `${THEME_PATH}/dist/js/app.min.js`,
  `${THEME_PATH}/dist/js/govuk-frontend-5.6.0.min.js`,
  `${THEME_PATH}/dist/assets/icons/fav/favicon.png`,
  `${THEME_PATH}/dist/assets/icons/fav/favicon-192x192.png`,
  `${THEME_PATH}/dist/fonts/soehne/soehne-halbfett.woff2`,
  `${THEME_PATH}/dist/fonts/soehne/soehne-kraftig.woff2`
];

async function fromCache(request) {
  const cache = await caches.open(CACHE_NAME);
  const matching = await cache.match(request);
  if (!matching || matching.status === 404) {
    throw new Error("no-match");
  }
  return matching;
}

async function updateCache(request, response) {
  const cache = await caches.open(CACHE_NAME);
  await cache.put(request, response);
  const keys = await cache.keys();
  if (keys.length > MAX_CACHE_SIZE) {
    await cache.delete(keys[0]); // Delete the oldest entry
  }
}

self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => cache.addAll(precacheFiles))
      .then(() => self.skipWaiting())
      .catch((error) => console.error('[Service Worker] Install failed:', error))
  );
});

self.addEventListener("activate", (event) => {
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (CACHE_NAME !== cacheName && cacheName.startsWith("dgwltd")) {
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => self.clients.claim())
      .catch((error) => console.error('[Service Worker] Activate failed:', error))
  );
});

async function fromCache(request) {
  try {
    const cache = await caches.open(CACHE_NAME);
    const matching = await cache.match(request);
    if (!matching || matching.status === 404) {
      throw new Error("no-match");
    }
    return matching;
  } catch (error) {
    console.error(`[Service Worker] fromCache error: ${error}`);
    throw error;
  }
}

self.addEventListener("fetch", (event) => {
  if (
    event.request.method !== "GET" ||
    event.request.url.match(/wp-admin/) ||
    event.request.url.match(/preview=true/)
  ) {
    return;
  }

  event.respondWith(
    (async () => {
      try {
        const cachedResponse = await fromCache(event.request);
        event.waitUntil(
          fetch(event.request).then((networkResponse) => {
            if (networkResponse && networkResponse.status === 200) {
              updateCache(event.request, networkResponse.clone());
            }
          })
        );
        return cachedResponse;
      } catch (error) {
        try {
          const networkResponse = await fetch(event.request);
          event.waitUntil(updateCache(event.request, networkResponse.clone()));
          return networkResponse;
        } catch (networkError) {
          console.error("[Service Worker] Network request failed and no cache.", networkError);
          if (event.request.destination === 'document') {
            return caches.match(`${THEME_PATH}/dist/offline.html`);
          }
        }
      }
    })()
  );
});