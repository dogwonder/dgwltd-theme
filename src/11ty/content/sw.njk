---
permalink: '../../../../sw.js'
---

const CACHE_NAME = "dgwltd-{% pkgVersion %}";
const MAX_CACHE_SIZE = 50; // Maximum cache size in entries
const THEME_PATH = 'wp-content/themes/dgwltd/';


// This is the service worker with the Cache-first network
const precacheFiles = [
  `${THEME_PATH}/dist/offline.html`,
  `${THEME_PATH}/dist/css/main.css`,
  `${THEME_PATH}/dist/js/app.min.js`,
  `${THEME_PATH}/dist/js/govuk-frontend-5.6.0.min.js`,
  `${THEME_PATH}/dist/icons/fav/favicon.png`,
  `${THEME_PATH}/dist/icons/fav/favicon-192x192.png`,
  `${THEME_PATH}/dist/fonts/soehne/soehne-halbfett.woff2`,
  `${THEME_PATH}/dist/fonts/soehne/soehne-kraftig.woff2`
];

// Function to retrieve from cache
function fromCache(request) {
  return caches.open(CACHE_NAME).then(cache => {
    return cache.match(request).then(matching => {
      if (!matching || matching.status === 404) {
        throw new Error("No match found in cache for " + request.url);
      }
      return matching;
    });
  });
}

// Function to update the cache
function updateCache(request, response) {
  return caches.open(CACHE_NAME).then(cache => {
    return cache.put(request, response).then(() => {
      return cache.keys().then(keys => {
        if (keys.length > MAX_CACHE_SIZE) {
          // Efficient cache deletion
          let keysToDelete = keys.slice(0, keys.length - MAX_CACHE_SIZE);
          return Promise.all(keysToDelete.map(key => cache.delete(key)));
        }
      });
    }).catch(error => {
      console.error("Error updating cache for request:", request.url, error);
    });
  });
}

// Install event
self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        return Promise.all(
          precacheFiles.map((url) => {
            return cache.add(url).catch((error) => {
              console.error(`[Service Worker] Failed to cache ${url}:`, error);
            });
          })
        );
      })
      .then(() => self.skipWaiting())
      .catch((error) => console.error('[Service Worker] Install failed:', error))
  );
});

// Fetch event
self.addEventListener("fetch", (event) => {
  const requestUrl = new URL(event.request.url);

  // Handle same-origin requests
  if (requestUrl.origin === location.origin) {
    event.respondWith(
      fromCache(event.request).catch((error) => {
        console.error("[Service Worker] fromCache error:", error);
        return fetch(event.request);
      })
    );

    event.waitUntil(
      fetch(event.request).then((response) => {
        return updateCache(event.request, response);
      }).catch((error) => {
        console.error("[Service Worker] fetch error:", error);
      })
    );
  } else {
    // Handle external requests with runtime caching
    event.respondWith(
      caches.open(CACHE_NAME).then((cache) => {
        return cache.match(event.request).then((response) => {
          return response || fetch(event.request).then((networkResponse) => {
            cache.put(event.request, networkResponse.clone());
            return networkResponse;
          });
        });
      })
    );
  }
});