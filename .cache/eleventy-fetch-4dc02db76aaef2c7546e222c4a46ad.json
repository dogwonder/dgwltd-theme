[{"id":448,"date":"2025-01-10T11:26:41","date_gmt":"2025-01-10T11:26:41","guid":{"rendered":"https://dgw.ltd/?p=448"},"modified":"2025-01-10T12:04:14","modified_gmt":"2025-01-10T12:04:14","slug":"wp-scss","status":"publish","type":"post","link":"https://dgw.ltd/2025/01/10/wp-scss/","title":{"rendered":"WP.scss"},"content":{"rendered":"\n<p>Increasingly I&#8217;ve been including <a href=\"https://www.11ty.dev\">11ty</a> in my WordPress builds as part of the theme. Great for static assets, such as offline.html, or using inbuilt features such as addPassthroughCopy to move assets around the theme. But part of the problem I&#8217;ve had is how do I get my static files looking the same as the WordPress theme, it&#8217;s easy enough to link to the main stylesheet I am generating. But WordPress generates a bunch more stuff on the fly that we&#8217;ll need if we want full parity.</p>\n\n\n\n<p>So I got to thinking, theme.json is JSON right, and 11ty ü•∞ JSON.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Theme.json</h2>\n\n\n\n<p>In modern WordPress, &#8216;<a href=\"https://developer.wordpress.org/themes/global-settings-and-styles/\">Global Settings and Styles</a>&#8216; (a sort of jsony Design System) are set via <a href=\"https://developer.wordpress.org/themes/global-settings-and-styles/\">theme.json</a>, now being JSON, we can simply treat this as <a href=\"https://www.11ty.dev/docs/data-global-custom/\">global data</a> in Eleventy.</p>\n\n\n\n<pre class=\"wp-block-code is-style-js\"><code class=\"language-js\">// Read and parse the WP theme.json file\nconst themeJSON = JSON.parse(await readFile(new URL('./theme.json', import.meta.url)));\n\n// Add theme settings to Eleventy global data\neleventyConfig.addGlobalData('theme', themeJSON);</code></pre>\n\n\n\n<p>We can now get things out of my <a href=\"https://github.com/dogwonder/dgwltd-theme/blob/main/theme.json\">theme.json</a> file via a nunjucks file, wp.njk, via an output tag such as {{ theme.settings.appearanceTools }}. We&#8217;ll also need to then output to a CSS or SCSS file that we can import back into our build or use directly.</p>\n\n\n\n<pre class=\"wp-block-code is-style-twig\"><code class=\"language-twig\">---\npermalink: '../src/assets/scss/wp.scss'\n---</code></pre>\n\n\n\n<p>The plot thickens&#8230;</p>\n\n\n\n<h2 class=\"wp-block-heading\">Palette</h2>\n\n\n\n<p>Colors! We all need some color in our life. So let&#8217;s start with a relatively straightforward one to get all of our colors.</p>\n\n\n\n<pre class=\"wp-block-code is-style-twig\"><code class=\"language-twig\">{%- for color in theme.settings.color.palette %}\n--wp--preset--color--{{ color.slug }}: {{ color.color }};\n{%- endfor %}</code></pre>\n\n\n\n<p>And in our wp.scss this generates </p>\n\n\n\n<pre class=\"wp-block-code is-style-css\"><code class=\"language-css\">--wp--preset--color--primary: #FA008A;\n--wp--preset--color--secondary: #00E5E5;\n--wp--preset--color--accent-magenta: #C3006A;\n--wp--preset--color--accent-peach: #FFC3B9;\n--wp--preset--color--accent-purple: #9A00FA;\n--wp--preset--color--dark: #0d0f05;\n--wp--preset--color--light: #ffffff;\n--wp--preset--color--alt: #f1f2f0;\n--wp--preset--color--focus: #FFDD00;</code></pre>\n\n\n\n<p>Woohoo. We are away. </p>\n\n\n\n<h2 class=\"wp-block-heading\">Fluid Typography</h2>\n\n\n\n<p>This is a little more complex. I am increasingly setting all my typography in WordPress&#8217; theme.json file. It means the admin and front-end is the same and we have a bunch of CSS vars we can use everywhere.</p>\n\n\n\n<p>WordPress enables fluid typography out of the box via the Fluid property, for example. </p>\n\n\n\n<pre class=\"wp-block-code is-style-json\"><code class=\"language-json\">{\n\t\"name\": \"Medium\",\n\t\"size\": \"1.5625rem\",\n\t\"fluid\": {\n\t\t\"min\": \"1.275rem\",\n\t\t\"max\": \"1.5625rem\"\n\t},\n\t\"slug\": \"md\"\n}</code></pre>\n\n\n\n<p>But we need to get this into our CSS and convert the min and max to clamp(), WordPress does this via it&#8217;s own methods, so we&#8217;ll need to bake our own. Using the <a href=\"https://github.com/trys/utopia-core\">calculations</a> behind <a href=\"https://utopia.fyi\">Utopia</a> we can create a custom <a href=\"https://www.11ty.dev/docs/shortcodes/\">Eleventy shortcode</a>.</p>\n\n\n\n<pre class=\"wp-block-code is-style-js\"><code class=\"language-js\">eleventyConfig.addShortcode('calculateClamp', (\n    minSize,\n    maxSize,\n    minWidth,\n    maxWidth,\n    usePx = false,\n    relativeTo = 'viewport'\n  ) =&gt; {\n    // Helpers\n    const roundValue = (n) =&gt; Math.round((n + Number.EPSILON) * 10000) / 10000;\n\n    // Clamp\n    const isNegative = minSize &gt; maxSize;\n    const min = isNegative ? maxSize : minSize;\n    const max = isNegative ? minSize : maxSize;\n\n    const divider = usePx ? 1 : 16;\n    const unit = usePx ? 'px' : 'rem';\n    const relativeUnits = {\n      viewport: 'vi',\n      'viewport-width': 'vw',\n      container: 'cqi'\n    };\n    const relativeUnit = relativeUnits&#91;relativeTo] || relativeUnits.viewport;\n\n    const slope = ((maxSize / divider) - (minSize / divider)) / ((maxWidth / divider) - (minWidth / divider));\n    const intersection = (-1 * (minWidth / divider)) * slope + (minSize / divider);\n    return `clamp(${roundValue(min / divider)}${unit}, ${roundValue(intersection)}${unit} + ${roundValue(slope * 100)}${relativeUnit}, ${roundValue(max / divider)}${unit})`;\n});</code></pre>\n\n\n\n<p>And now in our nunchucks file we can make our way through the Typography Font Sizes array. I also had issues with values like 2-xl. Even though they are defined in the theme.json as 2xl, they come out as 2-xl. So I created a little utility filter called hyphenate that transforms anything with %xs or %xl to %-xs, or %-xl. </p>\n\n\n\n<pre class=\"wp-block-code is-style-twig\"><code class=\"language-twig\">{% set minWidth = 320 %}\n{% set maxWidth = 1500 %}\n\n{%- for size in theme.settings.typography.fontSizes %}\n    {%- if size.fluid %}\n        {%- set minSize = size.fluid.min | remToPx -%}\n        {%- set maxSize = size.fluid.max | remToPx -%}\n        --wp--preset--font-size--{{ size.slug | hyphenate }}: {% calculateClamp minSize, maxSize, minWidth, maxWidth %};\n    {% else %}\n        --wp--preset--font-size--{{ size.slug | hyphenate }}: {{ size.size }};\n    {% endif %}\n{%- endfor -%}</code></pre>\n\n\n\n<p>And drumroll ü•Å&#8230; we get</p>\n\n\n\n<pre class=\"wp-block-code is-style-css\"><code class=\"language-css\">--wp--preset--font-size--body: clamp(1.0625rem, 1.0117rem + 0.2542vi, 1.25rem);\n--wp--preset--font-size--md: clamp(1.275rem, 1.197rem + 0.3898vi, 1.5625rem);\n--wp--preset--font-size--lg: clamp(1.53rem, 1.4153rem + 0.5737vi, 1.9531rem);\n--wp--preset--font-size--xl: clamp(1.836rem, 1.6718rem + 0.8209vi, 2.4414rem);\n--wp--preset--font-size--2-xl: clamp(2.2032rem, 1.9731rem + 1.1506vi, 3.0518rem);\n--wp--preset--font-size--3-xl: clamp(2.6438rem, 2.3263rem + 1.5877vi, 3.8147rem);</code></pre>\n\n\n\n<p>It&#8217;s not exactly the same as the WP version (see below) as they are likely using a different method for responsive typography as can be seen below. But I&#8217;ll take the <a href=\"https://utopia.fyi\">Utopia version</a>.</p>\n\n\n\n<pre class=\"wp-block-code is-style-css\"><code class=\"language-css\">--wp--preset--font-size--body: clamp(1.0625rem, 1.063rem + ((1vw - 0.2rem) * 0.234), 1.25rem);\n--wp--preset--font-size--md: clamp(1.275rem, 1.275rem + ((1vw - 0.2rem) * 0.36), 1.5625rem);\n--wp--preset--font-size--lg: clamp(1.53rem, 1.53rem + ((1vw - 0.2rem) * 0.529), 1.9531rem);\n--wp--preset--font-size--xl: clamp(1.836rem, 1.836rem + ((1vw - 0.2rem) * 0.756), 2.4414rem);\n--wp--preset--font-size--2-xl: clamp(2.2032rem, 2.203rem + ((1vw - 0.2rem) * 1.061), 3.0518rem);\n--wp--preset--font-size--3-xl: clamp(2.6438rem, 2.644rem + ((1vw - 0.2rem) * 1.464), 3.8147rem);</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">Typography</h2>\n\n\n\n<p>Now for the rest of the typgraphy. We&#8217;ll need font-families, line-heights, letter-spacing. One little gotcha I got was for nested values, take our line height. We have some nested values for the heading values. So we&#8217;ll need to traverse our way over those as well, via {%- if value is mapping %} and then {% for subkey, subvalue in value %}. </p>\n\n\n\n<pre class=\"wp-block-code is-style-json\"><code class=\"language-json\">\"lineHeight\": {\n\t\"body\": \"1.5\",\n\t\"heading\": {\n\t\t\"sm\": 1.25,\n\t\t\"lg\": 1.05\n\t}\n}</code></pre>\n\n\n\n<p>Here is the full typography section for font-family, font-sizes, letter-spacing and line height:</p>\n\n\n\n<pre class=\"wp-block-code is-style-twig\"><code class=\"language-twig\">{%- if theme.settings.typography -%}\n\n    {%- for family in theme.settings.typography.fontFamilies %}\n        --wp--preset--font-family--{{ family.slug }}: {{ family.fontFamily | safe }};\n    {%- endfor -%}\n\n    {%- for size in theme.settings.typography.fontSizes %}\n        {%- if size.fluid %}\n            {%- set minSize = size.fluid.min | remToPx -%}\n            {%- set maxSize = size.fluid.max | remToPx -%}\n            --wp--preset--font-size--{{ size.slug | hyphenate }}: {% calculateClamp minSize, maxSize, minWidth, maxWidth %};\n        {% else %}\n            --wp--preset--font-size--{{ size.slug | hyphenate }}: {{ size.size }};\n        {% endif %}\n    {%- endfor -%}\n\n    {%- for key, value in theme.settings.custom.typography.letterSpacing %}\n        --wp--custom--typography--letter-spacing--{{ key }}: {{ value }};\n    {%- endfor -%}    \n\n    {%- for key, value in theme.settings.custom.typography.lineHeight -%}\n        {%- if value is mapping %}\n        {% for subkey, subvalue in value %}\n        --wp--custom--typography--line-height--{{ key }}--{{ subkey }}: {{ subvalue }};\n        {%- endfor %}\n        {%- else %}\n        --wp--custom--typography--line-height--{{ key }}: {{ value }};\n        {%- endif %}\n    {%- endfor -%}   \n\n{%- endif -%}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">Spacing</h2>\n\n\n\n<p style=\"padding-top:0;padding-bottom:0\">Default and Custom. I like to define the default WordPress spacing values so I can use them in the admin. I also map the default ones to my own custom spacing scale which are also responsive (generated via <a href=\"https://utopia.fyi/space/calculator\">Utopia</a>). Now this seems to change with every bloody version of WordPress but this setup in theme.json seems to allow us to override the default spacing sizes in the WordPress admin (note this is a subset for brevity)</p>\n\n\n\n<pre class=\"wp-block-code is-style-json\"><code class=\"language-json\">\"spacing\": {\n\t\"defaultFontSizes\": false, \n\t\"defaultSpacingSizes\": false,\n\t\"spacingScale\": { \"steps\": 0 },\n\t\"spacingSizes\": &#91;\n\t\t{\n\t\t\t\"name\": \"Small\",\n\t\t\t\"size\": \"var(--wp--custom--spacing--sm)\",\n\t\t\t\"slug\": \"small\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Medium\", \n\t\t\t\"size\": \"var(--wp--custom--spacing--md)\",\n\t\t\t\"slug\": \"medium\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Large\", \n\t\t\t\"size\": \"var(--wp--custom--spacing--lg)\",\n\t\t\t\"slug\": \"large\"\n\t\t}\n\t],\n}</code></pre>\n\n\n\n<p>And then my custom values:</p>\n\n\n\n<pre class=\"wp-block-code is-style-json\"><code class=\"language-json\">\"custom\": {\n\t\"spacing\": {\n\t\t\t\"sm\": \"clamp(1.0625rem, 1.0117rem + 0.2542vi, 1.25rem)\",\n\t\t\t\"md\": \"clamp(1.625rem, 1.5572rem + 0.339vi, 1.875rem)\",\n\t\t\t\"lg\": \"clamp(2.125rem, 2.0233rem + 0.5085vi, 2.5rem)\",\n\t\t}\n}</code></pre>\n\n\n\n<p>Oof..deep breath. Now we can put it all together (and lest we forget we need to hyphenate as well). </p>\n\n\n\n<pre class=\"wp-block-code is-style-twig\"><code class=\"language-twig\">{%- for size in theme.settings.spacing.spacingSizes %}\n--wp--preset--spacing--{{ size.slug | hyphenate }}: {{ size.size }};\n{%- endfor -%}\n\n{%- for key, value in theme.settings.custom.spacing -%}\n    {%- if value is mapping -%}\n        {%- for subkey, subvalue in value %}\n        --wp--custom--spacing--{{ key | hyphenate }}--{{ subkey }}: {{ subvalue }};\n        {%- endfor %}\n    {%- else %}\n        --wp--custom--spacing--{{ key | hyphenate }}: {{ value }};\n    {%- endif -%}\n{%- endfor -%}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">Core styles</h2>\n\n\n\n<p>Obvs we want to pipe through some document defaults for things like &lt;body&gt;, H1, H2, H3, H4, H4, H5, H6. I drew the line at custom elements, because JFC. </p>\n\n\n\n<pre class=\"wp-block-code is-style-twig\"><code class=\"language-twig\">body {\n    color: {{ theme.styles.color.text }};\n    background-color: {{ theme.styles.color.background }};\n    font-family: {{ theme.styles.typography.fontFamily }};\n    font-size: {{ theme.styles.typography.fontSize }};\n    font-weight: {{ theme.styles.typography.fontWeight }};\n    letter-spacing: {{ theme.styles.typography.letterSpacing }};\n    line-height: {{ theme.styles.typography.lineHeight }};\n}\n\n{%- for key, value in theme.styles.elements %}\n    {{ key }} {\n        {%- if key in &#91;'h1', 'h2', 'h3', 'h4', 'h5', 'h6'] %}\n        font-family: {{ value.typography.fontFamily }};\n        font-size: {{ value.typography.fontSize }};\n        font-weight: {{ value.typography.fontWeight }};\n        line-height: {{ value.typography.lineHeight }};\n        letter-spacing: {{ value.typography.letterSpacing }};\n        {%- endif %}\n    }\n{%- endfor %}</code></pre>\n\n\n\n<p>And finally a little wash up for some <a href=\"https://developer.wordpress.org/news/2023/01/a-walk-through-of-layout-classes-in-wordpress-6-1/\">WordPress global CSS</a> which seems to incanted from some weird place but if affects stuff like WordPress global component spacing. A lot of this can be a callback to &#8220;blockGap&#8221;: 2rem and useRootPaddingAwareAlignments.  This is still somewhat verbose, and opinionated and I honestly get a little lost. But if we want parity we&#8217;ll need at least some of these:</p>\n\n\n\n<pre class=\"wp-block-code is-style-css\"><code class=\"language-css\">:root {\n    --wp--style--block-gap: var(--buffer, var(--wp--custom--spacing--gap))\n}\n:root :where(.is-layout-flow) &gt; :first-child {\n    margin-block-start: 0\n}\n:root :where(.is-layout-flow) &gt; :last-child {\n    margin-block-end: 0\n}\n:root :where(.is-layout-flow) &gt; * {\n    margin-block-start: var(--buffer, var(--wp--custom--spacing--gap));\n    margin-block-end: 0\n}</code></pre>\n\n\n\n<p>And well that&#8217;s about it. Probably didn&#8217;t really need to do this, but it&#8217;s quite useful to understanding more about what&#8217;s going on in WordPress theme.json and its global styling system. Further we have one<sup data-fn=\"3f554725-9b44-4a07-a52a-87391fccab69\" class=\"fn\"><a href=\"#3f554725-9b44-4a07-a52a-87391fccab69\" id=\"3f554725-9b44-4a07-a52a-87391fccab69-link\">1</a></sup> source of truth for our Design System.</p>\n\n\n<ol class=\"wp-block-footnotes\"><li id=\"3f554725-9b44-4a07-a52a-87391fccab69\">(-ish, let&#8217;s face it, there is never a 100% single source of truth)  <a href=\"#3f554725-9b44-4a07-a52a-87391fccab69-link\" aria-label=\"Jump to footnote reference 1\">‚Ü©Ô∏é</a></li></ol>","protected":false},"excerpt":{"rendered":"<p>Using WordPress&#8217; theme.json as a global data file in 11ty to generate a custom CSS file. </p>\n","protected":false},"author":1,"featured_media":472,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_acf_changed":false,"_jetpack_memberships_contains_paid_content":false,"footnotes":"[{\"content\":\"(-ish, let's face it, there is never a 100% single source of truth) \",\"id\":\"3f554725-9b44-4a07-a52a-87391fccab69\"}]"},"categories":[6],"tags":[],"class_list":["post-448","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-code"],"acf":{"hide_title":false},"jetpack_sharing_enabled":true,"jetpack_featured_media_url":"https://dgw.ltd/wp-content/uploads/2025/01/carbon-theme-json.png","_links":{"self":[{"href":"https://dgw.ltd/wp-json/wp/v2/posts/448","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https://dgw.ltd/wp-json/wp/v2/posts"}],"about":[{"href":"https://dgw.ltd/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/comments?post=448"}],"version-history":[{"count":11,"href":"https://dgw.ltd/wp-json/wp/v2/posts/448/revisions"}],"predecessor-version":[{"id":482,"href":"https://dgw.ltd/wp-json/wp/v2/posts/448/revisions/482"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/media/472"}],"wp:attachment":[{"href":"https://dgw.ltd/wp-json/wp/v2/media?parent=448"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/categories?post=448"},{"taxonomy":"post_tag","embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/tags?post=448"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":450,"date":"2024-12-20T13:20:15","date_gmt":"2024-12-20T13:20:15","guid":{"rendered":"https://dgw.ltd/?p=450"},"modified":"2024-12-26T18:01:13","modified_gmt":"2024-12-26T18:01:13","slug":"hello-world-2","status":"publish","type":"post","link":"https://dgw.ltd/2024/12/20/hello-world-2/","title":{"rendered":"&lt;! Hello world />"},"content":{"rendered":"\n<p>I was going to do my first proper post on here, detailing how I got WordPress&#8217; theme.json into my CSS pipeline. I started said post, added a couple of code blocks and well&#8230;.meh. It just wasn&#8217;t very inspiring, monospaced white type on a back background.</p>\n\n\n\n<p>I had a little look around for some syntax highlighting options. Obviously there are loads and this would be fine. But but but. The point about this blog was to be as WordPress-y as possible. WordPress despite its recent drama is getting really good, I mean it&#8217;s always been pretty awesome, but after a couple of wonky years, some brilliant dev focused stuff is happening. So I got to thinking, I wonder if I can do something with <a href=\"https://developer.wordpress.org/block-editor/reference-guides/block-api/block-variations/\">Block Variations</a> are something similar.</p>\n\n\n\n<p>First obviously we need some syntax highlighting, went with the most obvious one <a href=\"https://prismjs.com\">Prism.js</a>. And via npm I just installed the most basic setup I could.</p>\n\n\n\n<pre class=\"wp-block-code is-style-js\"><code class=\"language-js\">import 'prismjs';\nimport 'prismjs/components/prism-markup-templating';\nimport 'prismjs/components/prism-css';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-javascript';</code></pre>\n\n\n\n<p>And I grabbed some CSS via the <a href=\"https://github.com/PrismJS/prism-themes\">Prism repo</a></p>\n\n\n\n<p>From there I created some <a href=\"https://developer.wordpress.org/themes/features/block-style-variations/\">Block Style Variations</a> (seriously someone needs to start differentiating a little more over at WP, Block Styles, Block Variations, Block Patterns, Block Themes, Block Blocks). </p>\n\n\n\n<pre class=\"wp-block-code is-style-js\"><code class=\"language-js\">import { registerBlockVariation, registerBlockStyle } from '@wordpress/blocks';\n\n//Register a block style\nconst styles = &#91;\n    {\n        name: 'default',\n        label: 'Default',\n        isDefault: true,\n    },\n    {\n        name: 'html',\n        label: 'HTML',\n    },\n    {\n        name: 'css',\n        label: 'CSS',\n    }, \n    {\n\t\tname: 'js',\n\t\tlabel: 'JS'\n\t}, \n\t{\n\t\tname: 'php',\n\t\tlabel: 'PHP'\n\t}\n];\n\nregisterBlockStyle(\"core/code\", &#91;...styles]);</code></pre>\n\n\n\n<p>So now we can tell WordPress what type of Code block this is!</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" decoding=\"async\" width=\"270\" height=\"196\" src=\"https://dgw.ltd/wp-content/uploads/2024/12/Screenshot-2024-12-19-at-16.50.13.png\" alt=\"Block Style Variations, HTML, CSS, JS, PHP\" class=\"wp-image-453\" style=\"width:300px\" srcset=\"https://dgw.ltd/wp-content/uploads/2024/12/Screenshot-2024-12-19-at-16.50.13.png 270w, https://dgw.ltd/wp-content/uploads/2024/12/Screenshot-2024-12-19-at-16.50.13-16x12.png 16w\" sizes=\"auto, (max-width: 270px) 100vw, 270px\" /></figure>\n\n\n\n<p>This then gives us this markup on the frontend.</p>\n\n\n\n<pre class=\"wp-block-code is-style-html\"><code class=\"language-html\">&lt;pre class=\"wp-block-code is-style-html\"&gt;\n    &lt;code&gt;\n        &lt;p&gt;Hello world!&lt;/p&gt;        \n    &lt;/code&gt;\n&lt;/pre&gt;</code></pre>\n\n\n\n<p>Now we can use the rather excellent but mystifying WP_HTML_Tag_Processor to loop through the blocks, find any instance of the code block and inject a specific class based on our Block Style. This was partly inspired by <a href=\"https://bsky.app/profile/markwilkinson.dev\">Mark Wilkinson</a> talking about it. I‚Äôve found it to be a nice way to subtly modify core blocks without the need to build an entirely new one, whether it‚Äôs to add a data attribute or, as in this case, a CSS class.</p>\n\n\n\n<pre class=\"wp-block-code is-style-php\"><code class=\"language-php\">function dgwltd_utility_edit_code_markup( $block_content, $block, $instance ) {\n\n    // create a new instance of the WP_HTML_Tag_Processor class.\n    $tags = new WP_HTML_Tag_Processor( $block_content );\n\n    $styles = &#91;'html', 'css', 'js', 'php'];\n\n    // loop through each code block.\n    while ( $tags-&gt;next_tag( &#91; 'class_name' =&gt; 'wp-block-code' ] ) ) {\n\n        //Find the CSS class\n        $class = $tags-&gt;get_attribute('class');\n        //This returns wp-block-code is-style-html I just want to get the is-style- part\n        $style = str_replace('wp-block-code is-style-', '', $class);\n        \n        // Check if the current tag has children and navigate to the child &lt;code&gt; tag\n        if ( $tags-&gt;next_tag( &#91; 'tag_name' =&gt; 'code' ], true ) ) {\n            // Add the class to the child &lt;code&gt; tag\n            $tags-&gt;set_attribute( 'class', 'language-' . $style );\n        }\n            \n\n    }\n\n    // save the manipulated HTML back to the block content.\n    $block_content = $tags-&gt;get_updated_html();\n\n    // return the block content.\n    return $block_content;\n\n       \n}\n\nadd_filter( 'render_block_core/code', 'dgwltd_utility_edit_code_markup', 10, 3 );</code></pre>\n\n\n\n<p>Voil√†!</p>\n","protected":false},"excerpt":{"rendered":"<p>I was going to do my first proper post on here, detailing how I got WordPress&#8217; theme.json into my CSS pipeline. I started said post, added a couple of code blocks and well&#8230;.meh. It just wasn&#8217;t very inspiring, monospaced white type on a back background. I had a little look around for some syntax highlighting [&hellip;]</p>\n","protected":false},"author":1,"featured_media":460,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_acf_changed":false,"_jetpack_memberships_contains_paid_content":false,"footnotes":""},"categories":[6],"tags":[],"class_list":["post-450","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-code"],"acf":{"hide_title":false},"jetpack_sharing_enabled":true,"jetpack_featured_media_url":"https://dgw.ltd/wp-content/uploads/2024/12/carbon.png","_links":{"self":[{"href":"https://dgw.ltd/wp-json/wp/v2/posts/450","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https://dgw.ltd/wp-json/wp/v2/posts"}],"about":[{"href":"https://dgw.ltd/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/comments?post=450"}],"version-history":[{"count":12,"href":"https://dgw.ltd/wp-json/wp/v2/posts/450/revisions"}],"predecessor-version":[{"id":466,"href":"https://dgw.ltd/wp-json/wp/v2/posts/450/revisions/466"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/media/460"}],"wp:attachment":[{"href":"https://dgw.ltd/wp-json/wp/v2/media?parent=450"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/categories?post=450"},{"taxonomy":"post_tag","embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/tags?post=450"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":1,"date":"2024-12-16T09:30:00","date_gmt":"2024-12-16T09:30:00","guid":{"rendered":"https://dgw.ltd/?p=1"},"modified":"2024-12-20T14:00:13","modified_gmt":"2024-12-20T14:00:13","slug":"hello-world","status":"publish","type":"post","link":"https://dgw.ltd/2024/12/16/hello-world/","title":{"rendered":"Hello world!"},"content":{"rendered":"\n<p>Welcome to DGW.ltd‚Äîa theme and plugin I built as a playground for experimenting, and a place to store my go-to code and starter templates for building new WordPress sites.</p>\n\n\n\n<p>I thought it‚Äôd also be a good spot to share some musings about WordPress‚Äîthoughts, ideas, and the occasional rant. I already have a blog, but it‚Äôs more the ramblings of an aging developer. Here, I wanted a space purely for talking about code.</p>\n\n\n\n<p>So, here goes.</p>\n","protected":false},"excerpt":{"rendered":"<p>Welcome to DGW.ltd‚Äîa theme and plugin I built as a playground for experimenting, and a place to store my go-to code and starter templates for building new WordPress sites. I thought it‚Äôd also be a good spot to share some musings about WordPress‚Äîthoughts, ideas, and the occasional rant. I already have a blog, but it‚Äôs [&hellip;]</p>\n","protected":false},"author":1,"featured_media":309,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"_acf_changed":false,"_jetpack_memberships_contains_paid_content":false,"footnotes":""},"categories":[7],"tags":[],"class_list":["post-1","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-random"],"acf":{"hide_title":false},"jetpack_sharing_enabled":true,"jetpack_featured_media_url":"https://dgw.ltd/wp-content/uploads/2022/12/IMG_6595-jpg.webp","_links":{"self":[{"href":"https://dgw.ltd/wp-json/wp/v2/posts/1","targetHints":{"allow":["GET"]}}],"collection":[{"href":"https://dgw.ltd/wp-json/wp/v2/posts"}],"about":[{"href":"https://dgw.ltd/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/comments?post=1"}],"version-history":[{"count":2,"href":"https://dgw.ltd/wp-json/wp/v2/posts/1/revisions"}],"predecessor-version":[{"id":445,"href":"https://dgw.ltd/wp-json/wp/v2/posts/1/revisions/445"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/media/309"}],"wp:attachment":[{"href":"https://dgw.ltd/wp-json/wp/v2/media?parent=1"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/categories?post=1"},{"taxonomy":"post_tag","embeddable":true,"href":"https://dgw.ltd/wp-json/wp/v2/tags?post=1"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]